name: CI/CD to Azure (ACI)

on:
  push:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    # Weâ€™ll reuse these across steps
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}              # e.g. acrwebapp49379
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}  # rg-webapp-deploy
      IMAGE_NAME: my-webapp                          # change if you prefer
      APP_PORT: "3001"                               # your Node app port
      LOCATION: eastus                               # your RG is in eastus

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Build-time Node checks
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install deps
        run: npm ci || npm install

      - name: Run tests (if any)
        run: npm test --if-present

      # Login to Azure using your AZURE_CREDENTIALS secret (SP JSON)
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Compute ACR login server from ACR_NAME (no extra secret needed)
      - name: Set ACR_LOGIN_SERVER env
        run: echo "ACR_LOGIN_SERVER=${{ env.ACR_NAME }}.azurecr.io" >> $GITHUB_ENV

      # Login docker to ACR so we can push
      - name: ACR docker login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build & push container to ACR
      - name: Build and push image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      # Use Azure CLI action to create/update Azure Container Instance
      - name: Deploy to Azure Container Instances
        uses: azure/CLI@v1
        with:
          azcliversion: 2.60.0
          inlineScript: |
            # If a container with same name exists, delete it (idempotent)
            if az container show -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.IMAGE_NAME }}-aci" > /dev/null 2>&1; then
              az container delete -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.IMAGE_NAME }}-aci" --yes
            fi

            az container create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.IMAGE_NAME }}-aci" \
              --image "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest" \
              --location "${{ env.LOCATION }}" \
              --ports "${{ env.APP_PORT }}" \
              --dns-name-label "${{ env.IMAGE_NAME }}-${{ github.run_id }}" \
              --registry-login-server "${{ env.ACR_LOGIN_SERVER }}" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --restart-policy Always

            echo "APP_URL=http://${{ env.IMAGE_NAME }}-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io:${{ env.APP_PORT }}" >> $GITHUB_ENV

      - name: Show live URL
        run: echo "Live app: $APP_URL"
